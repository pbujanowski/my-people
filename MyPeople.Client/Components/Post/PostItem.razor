@using MyPeople.Services.Posts.Application.Dtos
@using MyPeople.Services.Posts.Application.Services
@inject IPostService PostService
@inject IDialogService DialogService

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudStack>
                <MudText Typo="Typo.h6">@Post.UserDisplayName</MudText>
                <MudText Typo="Typo.caption">Created: @Post.CreatedAt</MudText>
                @if (Post.UpdatedAt != Post.CreatedAt)
                {
                    <MudText Typo="Typo.caption">Edited: @Post.UpdatedAt</MudText>
                }
            </MudStack>
        </CardHeaderContent>
    </MudCardHeader>
    @if (IsEditMode)
    {
            <MudCardContent>
                <MudTextField T="string" Label="Write something..." Variant="Variant.Outlined" @bind-Text="@Post.Content"
                    Lines="5" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" OnClick="() => EditPostAsync()">Send</MudButton>
                <MudButton Color="Color.Default" OnClick="() => DisableEditMode(true)">Cancel</MudButton>
            </MudCardActions>
    }
    else
    {
        <MudCardContent>
            <MudText Typo="Typo.body1">@Post.Content</MudText>
        </MudCardContent>
    }
    @if (CheckIfPostIsOwnedByCurrentUser())
    {
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => EnableEditMode()">Edit</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => OnRemovePostClick()">Remove</MudButton>
        </MudCardActions>
    }
</MudCard>

@code {
    private PostDto? _oldPost;

    [Parameter, EditorRequired]
    public PostDto Post { get; set; } = default!;

    [Parameter, EditorRequired]
    public Guid CurrentUserId { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnPostEdit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnPostRemove { get; set; }

    public bool IsEditMode { get; set; }

    private bool CheckIfPostIsOwnedByCurrentUser() =>
        Post.UserId == CurrentUserId;

    private void EnableEditMode()
    {
        _oldPost = new PostDto
        {
            Id = Post.Id,
            UserId = Post.UserId,
            CreatedAt = Post.CreatedAt,
            UpdatedAt = Post.UpdatedAt,
            UserDisplayName = Post.UserDisplayName,
            Content = Post.Content
        };
        IsEditMode = true;
    }

    private void DisableEditMode(bool restoreOldPost)
    {
        if (restoreOldPost)
        {
            Post = new PostDto
            {
                Id = _oldPost?.Id,
                UserId = _oldPost?.UserId,
                CreatedAt = _oldPost?.CreatedAt,
                UpdatedAt = _oldPost?.UpdatedAt,
                UserDisplayName = _oldPost?.UserDisplayName,
                Content = _oldPost?.Content
            };
        }
        IsEditMode = false;
    }

    private async Task OnRemovePostClick()
    {
        var result = await DialogService.ShowMessageBox(
            title: "Confirmation",
            message: "Do you really want to remove this post?",
            yesText: "Remove",
            noText: "Cancel");
        if (result == true)
        {
            await RemovePostAsync();
        }
    }

    private async Task RemovePostAsync()
    {
        await PostService.DeletePostAsync(Post);
        await OnPostRemove.InvokeAsync();
    }

    private async Task EditPostAsync()
    {
        await PostService.UpdatePostAsync(Post);
        await OnPostEdit.InvokeAsync();
        DisableEditMode(false);
    }
}
